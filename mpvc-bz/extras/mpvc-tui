#!/usr/bin/env sh
#
# @file mpvc-tui
# @description mpvc tui, mpv terminal user interface
# @author gmt4 <gmt4 at github.com> (c) Copyright 2022 GPLv2+
# @url github.com/gmt4/mpvc
# SPDX-License-Identifier: GPL-2.0-or-later
#

PROGNAME=${0##*/}
PROGVERSION="v1.5"
PROGAUTHOR=gmt4
PROGURL="https://github.com/gmt4/mpvc"
SITEURL="https://gmt4.github.io/mpvc"

set -uf # -euf # TBD

equiet() { "$@" 2> /dev/null; }
oquiet() { "$@" 1> /dev/null; }
quiet()  { "$@" > /dev/null 2>&1; }

# Set TUI defaults
mpvctui_defaults()
{
    MPVC_CBLACK='\033[0;30m'
    MPVC_CRED='\033[0;31m'
    MPVC_CGREEN='\033[0;32m'
    MPVC_CGREENL='\033[1;32m'
    MPVC_CYELLOW='\033[0;33m'
    MPVC_CYELLOWL='\033[1;33m'
    MPVC_CBLUE='\033[0;34m'
    MPVC_CBLUEL='\033[1;34m'
    MPVC_CPURPLE='\033[0;35m'
    MPVC_CPURPLEL='\033[1;35m'
    MPVC_CCYAN='\033[0;36m'
    MPVC_CCYANL='\033[1;36m'
    MPVC_CWHITE='\033[0;37m'
    MPVC_CRST='\033[0m'

    MPVC_CLEAR='\033c'
    MPVC_CUP='\033[1;1H'

    # config defaults
    NO_COLOR="${NO_COLOR:-}"

    MPVC_COLOR0="$MPVC_CGREENL"
    MPVC_COLOR1="$MPVC_CCYAN"
    MPVC_COLOR2="$MPVC_CYELLOW"
    MPVC_UPDATEC=${MPVC_UPDATEC:-2}
    MPVC_CLEARC=${MPVC_CLEARC:-4}

    MPVC_TIPS=${MPVC_TIPS:-true}
    MPVC_TERM=${MPVC_TERM:-xterm}
    MPVC_SHELL=$(readlink -f /proc/$$/exe)
    export MPVC_CLINE=${MPVC_CLINE:-11}
}

# Load user config
mpvctui_config()
{
    mpvctui_defaults
    XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"}
    MPVC_CONFIG="${MPVC_CONFIG:-$XDG_CONFIG_HOME/mpvc/mpvc.conf}"
    MPVC_HISTORY="${MPVC_HISTORY:-$XDG_CONFIG_HOME/mpvc/mpvc-tui.history}"
    MPVC_SCROBBLER="${MPVC_SCROBBLER:-$XDG_CONFIG_HOME/mpvc/mpvc-tui.scb}"
    # if not present, create config dir
    mkdir -p "$(dirname "$MPVC_CONFIG")"
    touch "$MPVC_HISTORY"
    # if present load user config
    if [ -r "$MPVC_CONFIG" ]; then
        . "$MPVC_CONFIG"
    fi
    if ! quiet command -v rlwrap; then
        mpvctui_warn "$PROGNAME: Warning: No rlwrap, Install to get history, filename & completion support!"
        sleep 1
    fi
    if ! quiet command -v notify-send; then
        mpvctui_warn "$PROGNAME: Warning: No notify-send, Install to get mpv desktop notifications"
        sleep 1
    fi
}

mpvctui_warn() { echo "$@" >&2; }

# Displays "──[ $@ ]─────────────────────────────────────────────────────"
mpvctui_headerc()
{
    char="$1"; shift
    cstart="$1"; shift
    cend="$1"; shift
    ccolor="$1"; shift
    cols=$(stty size)
    cols=${cols##* }
    hdr="${char}${char}${cstart}$*${cend}"
    rem=$(( cols - ${#hdr} ))
    # when SHELL=/bin/dash, ${#hdr} is 4 chars smaller
    if [ "${MPVC_SHELL##*/}" = "dash" ]; then rem=$(( rem + 4 )); fi
    for _ in $(seq 1 $rem)
    do
        hdr="$hdr$char"
    done

    if [ -n "$NO_COLOR" ]; then
        printf "%s" "${hdr}"
    else
        # not using printf "%s" here as sh displays raw escape sequences, instead of colored output
        printf "${ccolor}${hdr}${MPVC_CRST}"
    fi
}

mpvctui_header0() { mpvctui_headerc '═' '[' ']' "$MPVC_COLOR0" " + $* "; }
mpvctui_header1() { mpvctui_headerc '─' '[' ']' "$MPVC_COLOR1" " + $* "; }
mpvctui_header2() { mpvctui_headerc '─' '[' ']' "$MPVC_COLOR2" " + $* "; }

mpvctui_tips()
{
    if [ "$MPVC_TIPS" = "false" ]; then return; fi
    tip=$(( count % 80 ))
    case $tip in
    0|1|2)    echo ": type control+c to enter prompt";;
    10|11|12) echo ": Check $PROGURL";;
    20|21|22) echo ": Check $SITEURL";;
    30|31|32) echo ": Config at ${MPVC_CONFIG##$HOME/}";;
    40|41|42) echo ": Launch from WM with: $PROGNAME -x";;
    50|51|52) echo ": version $PROGNAME $PROGVERSION at $PROGURL";;
    60|61|62) echo ": Update $MPVC_UPDATEC secs refresh $((count % MPVC_CLEARC))/$MPVC_CLEARC shell $MPVC_SHELL";;
    esac
}

mpvctui_watcher()
{
    mpvctui_header0 "${PROGNAME}$(mpvctui_tips)"
    mpvctui_header1 "Status"
    mpvc status
    mpvctui_header1 "Playlist"
    mpvc playlist
    mpvctui_header1 "Prompt"
}

mpvctui_input()
{
    MPVC_PROMPT="($PROGNAME) ${PWD##*/}: "
    if quiet command -v rlwrap; then
        cmd=$(rlwrap -o -c -S "$MPVC_PROMPT" -H "$MPVC_HISTORY" -f . -P '' cat)
    else
        echo "$MPVC_PROMPT"; read -r cmd
    fi
    case "$cmd" in
        '!!'*) "${SHELL}" -c "${cmd##!!}";;
        '!'*) eval "${cmd##!}";;
        'mpvc '*) QUIETFLAG=true $cmd;;
        'mpvc-tui '*) $cmd;;
        'mpvc-fzf '*) $cmd;;
        exit|quit|q) exit;;
        *) echo 'mpvc: Type commands at "mpvc:" prompt, "q" to quit';;
    esac
}

mpvctui_watch()
{
    count=0
    trap mpvctui_input INT
    while :
    do
        output=$(mpvctui_watcher 2>&1)
        if [ $(( count % MPVC_CLEARC )) -eq 0 ]; then printf "${MPVC_CLEAR}"; fi
        printf "${MPVC_CUP}"
        echo "$output"
        count=$(( count + 1 ))
        sleep $MPVC_UPDATEC
    done
}

mpvctui_mouse()
{
    clear
    mpvctui_mouse_buttons
    while mpvctui_mouse_events
    do
        clear
        mpvctui_mouse_buttons
    done
}

mpvctui_mouse_buttons()
{
    # groups: flags play chapter seek volume
    mpvc_button_mute=$( if [ "$(mpvc get mute)" = "true" ]; then echo M; else echo m; fi )
    mpvc_button_pause=$( if [ "$(mpvc get pause)" = "true" ]; then echo P; else echo p; fi )
    mpvc_button_video=$( if [ "$(mpvc get video)" = "true" ]; then echo V; else echo v; fi )
    mpvc_button_cache=$( if [ "$(mpvc get cache)" = "true" ]; then echo C; else echo c; fi )
    mpvc_button_repeat=$( if [ "$(mpvc get loop-playlist)" = "inf" ]; then echo R; else echo r; fi)
    mpvc_button_single=$( if [ "$(mpvc get loop-file)" = "true" ]; then echo S; else  echo s; fi)
    mpvc_button_idle=$( if [ "$(mpvc get idle)" = "true" ]; then echo I; else  echo i; fi )
    mpvc_buttons="${mpvc_button_mute}${mpvc_button_pause}${mpvc_button_video}${mpvc_button_cache}${mpvc_button_repeat}${mpvc_button_single}${mpvc_button_idle} <-> [#] {%} (=)"
    printf "%s" "$mpvc_buttons"
}

mpvctui_mouse_events()
{
    # check if $TERM supports mouse

    stty -icanon
    printf "\e[?1002h"

    # f: 1b5b 4d20 2623 0a
    #       |    |    |
    #       |    |    +----- coord TL 2121 - BR 7b3a: (33,33) - (123,58): (90,25)
    #       |    +---------- btn press 4020 release 4d23
    #       +--------------- tag for mouse event?

    line=$(xxd -l 6 -g 2 -p)
    case "$line" in
    1b5b4d20*) # btn1 press
        offsetx=0
        offsety=0
        coords=${line##1b5b4d20}
        coordx=${coords%%??}
        coordy=${coords##??}

        posx=$((0x${coordx} - 0x21))
        posy=$((0x${coordy} - 0x21))
        #echo "posxy $posx/$(tput cols) $posy/$(tput lines)"
        case "$posx,$posy" in
            0,$offsety) mpvc -q --mute;;
            1,$offsety) mpvc -q toggle;;
            2,$offsety) mpvc -q cycle video;;
            3,$offsety) mpvc -q cycle cache;;
            4,$offsety) mpvc -q repeat;;
            5,$offsety) mpvc -q single;;
            6,$offsety) mpvc -q cycle idle;;

            8,$offsety) mpvc -q prev;;
            9,$offsety) mpvc -q play "$(mpvc get playlist-pos)";;
           10,$offsety) mpvc -q next;;

           12,$offsety) mpvc chapter-prev;;
           13,$offsety) mpvc chapter-replay;;
           14,$offsety) mpvc chapter-next;;

           16,$offsety) mpvc -q seek -30;;
           17,$offsety) mpvc -q time 0;;
           18,$offsety) mpvc -q seek +60;;

           20,$offsety) mpvc -q vol -10;;
           21,$offsety) mpvc -q vol 70;;
           22,$offsety) mpvc -q vol +10;;
        esac
    ;;
    1b5b4d23*) # btn1 release
    ;;
    esac
}

mpvctui_notify()
{
    # $MPVC_SCROBBLER: scrobbling file contains one entry per line with tab-separated fields
    cmd_notify='notify-send -u normal -i info "$(mpvc)";'
    cmd_scrobble='echo $(mpvc expand-text "$(date +%s)\t\\${=duration}\t\\${path}\t\\${media-title}") >> '"$MPVC_SCROBBLER"

    awk -v cmd_scrobble="${1:-$cmd_scrobble}" -v cmd_notify="${2:-$cmd_notify}" '
        BEGIN { ot = otn = systime(); do_print = cmd_notify != "false" && cmd_scrobble != "false"; }

        /playback-restart|chapter-change|metadata-update/ {
            tn=systime()
            if (tn - otn > 1)
                system(cmd_notify);
            otn=tn
            if (do_print) print tn, $0, "notify"
        }

        /playback-restartproperty-change||metadata-update/ {
            t=systime()
            if (t - ot > 1)
                system(cmd_scrobble);
            ot=t
            if (do_print) print t, $0, "scrobble"
        }
    '
}

mpvctui_notify_loop_cli()
{
    scrobler_cli='echo $(date +"T%H:%M") $(mpvc -f "[%status%] #%position%/%playlistlength% %time% %artist% - %title% #%chapter%")'
    notify_cli='false'
    mpvctui_notify_loop "${1:-$scrobler_cli}" "${2:-$notify_cli}"
}

mpvctui_notify_loop()
{
    # loop to prevent mpvc idleloop exits when mpvsocket closes (mpv terminates)
    while sleep 1; do mpvc idleloop | mpvctui_notify "$@"; sleep 10; done
}

mpvctui_suggest()
{
    awk '
        BEGIN {
            srand()
        }
        ! /https:/ {
            gsub($1,"")
            gsub($1,"")
            if (length($0) > 0)
            {
                tracks[n++]=$0
                seen[$0]++
            }
        }
        END {
            //asort(seen, sorted)
            r=int(rand() * n)
            t=tracks[r]
            print r,seen[t],t
        }
    ' "$MPVC_SCROBBLER"
}

mpvctui_usage()
{
    echo "usage: $PROGNAME -[$optflags] args # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL"
    echo "  -d : Set the WD to the media directory given as argument"
    echo "  -n : Desktop notification using notify on mpvc events (notify-send*)"
    echo "  -s : Suggest a random media to play based on previous media played"
    echo "  -t : Starts the $PROGNAME to manage the mpv playlist (rlwrap*)"
    echo "  -T : Combo that starts $PROGNAME -t -n, and adds media given as args"
    echo "  -x : Starts $PROGNAME in a new $MPVC_TERM (config \$MPVC_TERM) [combine -x with $optflags]"
    echo "*tips: If unsure about where to begin, start with: $PROGNAME -d /path/to/media/ -T"
    exit;
}

optflags="d:hHktTm:nNsSP:u:x"
mpvctui_main()
{
    mpvctui_config
    if [ $# -eq 0 ]; then mpvctui_usage; fi

    while getopts "$optflags" flag;
    do
        case "$flag" in
        d) MPVC_DIR="$OPTARG"; cd "$MPVC_DIR" || return;;
        h) shift; mpvctui_usage ;;
        H) shift; cat $MPVC_SCROBBLER ;;
        t) shift; mpvctui_watch ;;
        T) shift;
           mpvc -q --mpv &
           ( sleep 2 && if [ "$#" -gt 0 ]; then mpvc --append "$@"; fi )
           ( sleep 1; pgrep -f "$PROGNAME -n" || setsid "$0" -n ) &
           mpvctui_watch
           ;;
        m) shift; mpvctui_mouse "$OPTARG" ;;
        n) shift; mpvctui_notify_loop "${1:-}" ;;
        N) shift; mpvctui_notify "${@}" ;;
        k) shift; pkill -f "$PROGNAME" ;;
        s) shift; mpvctui_suggest ;;
        S) shift; mpvctui_notify_loop_cli "${1:-}" ;;
        u) shift; MPVC_UPDATEC="$OPTARG" ;;
        x) shift; if quiet command -v $MPVC_TERM; then $MPVC_TERM -e "$0" "$@"; fi; exit;;
        *) mpvctui_usage;;
        esac
    done
}

mpvctui_main "$@"
