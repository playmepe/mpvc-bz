#!/usr/bin/env sh
#
# fyr  - 2019 (c) MIT | /bin/sh mpvc
# gmt4 - 2022 | fork & contributions
# control mpv remotely using JSON ipc
# https://mpv.io/manual/master/#json-ipc
#

PROGNAME=${0##*/}
PROGDIR=${0%/*}
PROGVERSION="v1.5"
PROGAUTHOR=gmt4
PROGURL="https://github.com/gmt4/mpvc"
SITEURL="https://gmt4.github.io/mpvc"

set -euf

usage() {
    cat >&2 << EOF
usage: $PROGNAME opts # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL
    -a | --add              : Add media to playlist (see --load for stdin).
    -s | --stop             : Always stop playback.
    -P | --play             : Always start playback.
    -p | --toggle           : Toggle playback.
       | --next             : Jump to next entry in the playlist
       | --prev             : Jump to previous entry in the playlist
    -i | --playlist         : Print filenames of tracks to fit within terminal.
    -I | --fullplaylist     : Print all filenames of tracks in current playlist.
    -v | --vol              : Increase/decrease volume relative to current volume.
    -h | --help             : Prints the short help.
    -H | --long-help        : Prints the long help.
EOF

    if [ $# -gt 0 ]; then
        cat >&2 << EOF
    -f | --format           : Enter a formatting string.
    -j | --track            : Go forwards/backwards through the playlist queue.
    -J | --tracknum         : Jump to playlist item number.
    -A | --playnext         : Add media to playlist after the current track.
    -n | --playnow          : Add media to playlist after the current track, and play it.
    -o | --save             : Save current playlist to given path.
    -l | --load             : Load playlist from given path (stdin if none is specified).
    -o | --autosave         : Auto save current playlist to ${MPVC_PLAYLIST##$HOME/}.
    -l | --autoload         : Auto load playlist from ${MPVC_PLAYLIST##$HOME/}.
    -l | --lsplaylists      : List playlist from ${MPVC_PLAYLIST##$HOME/}.
    -c | --crop             : Clear the playlist except for the media currently playing.
    -z | --shuffle          : Shuffle the current playlist.
    -l | --loop             : Loop currently playing playlist.
    -L | --loopfile         : Loop currently playing file.
    -m | --mute             : Toggle sound.
    -t | --seek             : Increase/decrease playback time relatively, accepts % values.
    -T | --time             : Set absolute playback time.
    -x | --speed            : Increase/decrease speed relative to the current speed.
    -X | --speedval         : Set absolute speed.
    -I | --image            : Enable adding of images to the queue.
    -k | --kill             : Kill the mpv process controlling the given socket.
    -K | --killall          : Kill all mpv processes indiscriminately.
    -S | --socket           : Set mpv socket [default: $MPVC_SOCKET].
    -q | --quiet            : Suppress all text output.
    -V | --volume           : Set absolute volume.
    -Q | --vid=no           : Start mpv with video output disabled.
    -- |                    : After adding files options after -- are passed to mpv.
       | --version          : Prints the $PROGNAME version.

    get                     : Get MPV property from $PROGNAME socket.
    set                     : Set MPV property from $PROGNAME socket.
    getr                    : Get JSON MPV property from $PROGNAME socket.
    setr                    : Set JSON MPV property from $PROGNAME socket.
    cmd                     : Send command to $PROGNAME socket.
    cmdr                    : Send command to $PROGNAME socket & retrieve raw JSON.
    sockcmd                 : Send MPV JSON IPC command to $PROGNAME socket.
    socklist                : List $PROGNAME sockets.
    togglec                 : Toggle MPV cache property.
    togglev                 : Toggle MPV video property.
    togglew                 : Toggle MPV window property.
    togglei                 : Toggle MPV idle property.
    cycle                   : Toggle/Cycle through MPV property values.
    idleloop                : Listen to MPV events on $PROGNAME socket.
    observe                 : Observe property in MPV events on $PROGNAME socket.
    search                  : Search the playlist by filename/url.
    searchplay|--searchplay : Search the playlist by filename and play the first match.
    searchPlay|--searchPlay : Search the playlist by title and play the first match.
    -R | --searchrm         : Search the playlist and remove matching entries.
    -M | --searchmv         : Search the playlist and move matching entries.
    stash                   : Manage mpv playing state as in git-stash(1)
    wait                    : Wait until MPV setups $PROGNAME socket (timeout after 10s)
    delay                   : Sleep delay, as in: $PROGNAME play 0 delay seek 20% vol 60

    (--)?expand-text        : Expand text as documented in mpv(1) Property Expansion
    (--)?metadata           : Retrieve current playing media metadata
    (--)?filename           : Retrieve current playing media filename
    (--)?replay             : Replay current playing media

    cprev | chapter-prev    : Jump to previous entry in the chapter-list
    cnext | chapter-next    : Jump to next entry in the chapter-list
    cplay | chapter-play    : Play the given chapter
    creplay | chapter-replay: Replay current chapter
    clist | chapter-list    : Output current chapter-list
    clistj|chapter-list-json: Output current chapter-list (json)
    csearch | chapter-search: Search current chapter-list
    chapter-searchplay      : Search and play the current chapter-list

Formatting:
    \`$PROGNAME --format\` will interpret the following delimiters if they are found:

    %name%, %path%, %dir%, %title%, %artist%, %album%, %albumartist%, comment%,
    %genre%, %year%, %percentage%, %playlistlength%, %position%, %repeat%,
    %single, %status%, %time%, %precisetime%, %speed%, %length%, %remaining%,
    %volume%, %muted%, %frame%, %width%, %height%, %ab-loop-a%, %ab-loop-b%,
    %video%, %screen%, %aspect%, %force-window%, %fullscreen%, %idle%,
    %chapter%, %chapters%

MPC compatibility layer:
    mpvc features nearly complete compatibility for mpc(1) commands, in
    addition to GNU style arguments. https://linux.die.net/man/1/mpc

Exit codes:
    0: Program ran succesfully.
    1: Input Argument error.
    2: Socket does not exist.
    3: Socket is not currently open.
    4: Dependency error.
EOF
    fi

    echo
    echo "*tips: If unsure about where to begin, have a look at $SITEURL"
}

equiet() { "$@" 2> /dev/null; }
oquiet() { "$@" 1> /dev/null; }
quiet()  { "$@" > /dev/null 2>&1; }
quietcheck(){ if [ "${QUIETFLAG:-}" = "true" ]; then quiet "$@"; else "$@"; fi; }

warn() { echo "$@" >&2; }
die()  { e=$1; shift; warn "$@"; exit "$e"; }

mpvc_defaults()
{
    XDG_CACHE_HOME=${XDG_CACHE_HOME:-"$HOME/.cache"}
    MPVC_CACHE_DIR="${MPVC_CACHE_DIR:-$XDG_CACHE_HOME/mpvc}"

    XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"}
    MPVC_CONFIG_DIR="${MPVC_CONFIG_DIR:-$XDG_CONFIG_HOME/mpvc}"
    MPVC_STASH_DIR="${MPVC_STASH_DIR:-$MPVC_CONFIG_DIR/stash}"

    MPVC_DATABASE="${MPVC_DATABASE:-$MPVC_CONFIG_DIR/db.m3u}"
    MPVC_PLAYLIST="${MPVC_PLAYLIST:-$MPVC_CONFIG_DIR/playlist}"
    MPVC_CONFIG="${MPVC_CONFIG:-$XDG_CONFIG_HOME/mpvc/mpvc.conf}"
    MPVC_SOCKET="${MPVC_SOCKET:-$MPVC_CONFIG_DIR/mpvsocket0}"
    MPVC_CURL_CACHE="${MPVC_CURL_CACHE:-$MPVC_CONFIG_DIR/curl-cache.txt}"
    MPVOPTIONS="${MPVOPTIONS:---no-audio-display --no-input-terminal}"
    MPVC_MPV="${MPVC_MPV:-mpv}"
    MPVC_SOCAT="${MPVC_SOCAT:-socat}"

    NO_COLOR="${NO_COLOR:-}"
    IMAGEFLAG="${IMAGEFLAG:-}"
    QUIETFLAG="${QUIETFLAG:-}"
    MPVC_LOCAL_CACHE="${MPVC_LOCAL_CACHE:-false}"
    FORMATSTRING="${FORMATSTRING:-}"

    # print default status of mpv instance
    if [ -z "$FORMATSTRING" ]; then
        FORMATSTRING="\
%artist% - %title% \r\
[%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%%) \r\
vol:%volume%%% mute:%muted% repeat:%repeat% single:%single% \r\
vid:%video% scr:%screen% win:%force-window% fs:%fullscreen% \r\
chapter:%chapter% %=chapter%/%chapters% idle:%idle%"
    fi
}

# Load user config
mpvc_config()
{
    mpvc_defaults
    # if not present, create config dir
    if [ ! -d "$MPVC_CONFIG_DIR" ]; then mkdir -p "$MPVC_CONFIG_DIR"; fi
    if [ ! -d "$MPVC_CACHE_DIR" ]; then mkdir -p "$MPVC_CACHE_DIR"; fi
    if [ ! -d "$MPVC_STASH_DIR" ]; then mkdir -p "$MPVC_STASH_DIR"; fi
    if [ ! -d "$MPVC_PLAYLIST" ]; then mkdir -p "$MPVC_PLAYLIST"; fi
    # if not present, create config files
    if [ ! -e "$MPVC_CURL_CACHE" ]; then true > "$MPVC_CURL_CACHE"; fi
    # if present load user config
    if [ -r "$MPVC_CONFIG" ]; then
        . "$MPVC_CONFIG"
    else
        echo "# ${MPVC_CONFIG##*/} $PROGNAME $PROGVERSION" > "${MPVC_CONFIG}"
    fi
}

mpvc_tac()
{
    awk '
        NR == 1 { lines=$0 }
        NR  > 1 { lines=$0"\n"lines }
        END     { print lines }
    ' "$@"
}

## Retrieval Functions ########################################################

mpvc_curl_cache()
{
    k=$2
    v="$( awk -F'\t' -v k="$k" '{ if ($1 == k) {print $2; exit} }' "$MPVC_CURL_CACHE" )"

    if [ "${#v}" -eq 0 ]; then
        v=$(curl "$@")
        o=$(cat "$MPVC_CURL_CACHE") # append at the top in 2023 :-)
        (echo "$k	$v"; echo "$o") > "$MPVC_CURL_CACHE"
    fi
    echo "$v"
}

mpvc_curl_cache_json()
{
    mpvc_curl_cache -sL "https://youtube.com/oembed?url=$1"
}

mpvc_curl_cache_metadata_json_once() {
    filename="${1:-}"
    result="${1:-}"
    case "$filename" in
        https://youtu.be/watch*|https://youtube.com/watch*|https://www.youtube.com/watch*)
            filename="$(echo "$filename" | sed 's|\(www.\)\?youtube.com|youtu.be|; s|/watch/\??v=|/|')"
            result="$(mpvc_curl_cache_json "$filename")"
            ;;
        https://youtu.be/*|https://youtube.com/*|https://www.youtube.com/*)
            result="$(mpvc_curl_cache_json "$filename")"
            ;;
        https://yewtu.be/watch*)
            filename="$(echo "$filename" | sed 's|://yewtu.be|://youtu.be|; s|/watch?v=|/|')"
            result="$(mpvc_curl_cache_json "$filename")"
            ;;
        https://yewtu.be/*)
            filename="$(echo "$filename" | sed 's|://yewtu.be|://youtu.be|')"
            result="$(mpvc_curl_cache_json "$filename")"
            ;;
        *) # otherwise, assume its a local file
            result="{ \"title\":${filename##*/}, }"
            ;;
    esac
    printf "$result\n"
}

mpvc_curl_cache_metadata_json() {
    for i in "$@"; do mpvc_curl_cache_metadata_json_once "$i"; done
}

# fn args: given a file/url return its title (may use curl to query YT)
mpvc_curl_cache_title_clean() {
    mpvc_curl_cache_metadata_json "$@" | mpvc_getjson 'title'
}

mpvc_getjson() {
    awk '/'"$1"'/{ sub(".*'"$1"'\":\"?",""); sub("\"?,\".+\".*",""); sub(", }$", ""); print }'
}

mpvc_sockrepl() { $MPVC_SOCAT - "$MPVC_SOCKET" || nc -U -N "$MPVC_SOCKET"; }
mpvc_sockcmd_() { echo "$@" | mpvc_sockrepl; }
mpvc_sockcmd()  { oquiet mpvc_sockcmd_ "$@"; }
mpvc_socklist() {
    for f in $(find "$MPVC_CONFIG_DIR" -type s); do
        idle_active=$(MPVC_SOCKET=$f mpvc_get idle-active)
        echo "$f:	idle-active=${idle_active:-}"
    done
}

mpvc_cmdr_() {
    command=$(for i in "$@"; do printf "$q$i$q, "; done)
    echo "{ \"command\": [ $command ] }"
}
mpvc_cmdr() { equiet mpvc_sockcmd_ "$(q='"' mpvc_cmdr_ "$@")"; }
mpvc_ecmdr() {
    ret=$(mpvc_cmdr "$@")
    case "$ret" in *"success"*|'') ;; *) echo "$ret"; return 1 ;; esac
}

mpvc_cmd()   { mpvc_cmdr "$@" | mpvc_getjson 'data'; }
mpvc_add()   { mpvc_ecmdr "add" "$@"; }
mpvc_get()   { mpvc_cmd "get_property_string" "$1"; }
mpvc_set()   { mpvc_ecmdr "set_property_string" "$@"; }
mpvc_cycle() { mpvc_ecmdr "cycle" "$1"; }

mpvc_getr()  { mpvc_cmdr "get_property" "$1"; }
mpvc_setr()  { mpvc_ecmdr "set_property" "$@"; }

mpvc_get_pause_status() {
    case "$(mpvc_get pause)" in
        yes) echo "paused";; no) echo "play" ;; *) echo "NA";;
    esac
}

mpvc_get_playlist_json() {
    mpvc_cmdr "get_property" "playlist" |
        grep -o '"data":\[.*\]' |
        awk '{ sub("^\"data\":",""); gsub("{\"filename\":","\n\t{\"filename\":");  } ! /^\[\]$/ { sub("]$","\n]"); } {print}'
    QUIETFLAG="true"
}

mpvc_get_playlist_once() {
    mpvc_get_playlist_json |
        sed 's|,"current":true||; s|,"playing":true||; s|,"id":[0-9]\+||; s|{"filename":"\(.*\)"}|\1|; s|","title":.*||; s/,$//; /^\[$/d; /\]$/d' |
        awk -v numbered="${1:-}" '
        {
            gsub("^[ \t]*", " ")
            if (length(numbered) > 0)
                printf "%2d %s\n", NR-1, $0
            else
                print
        }
    '
}

# fn args: $1: filename $2: full path flag to skip basename
mpvc_get_playlist_filename() {
    lid="${1:-}"
    fullPath="${2:-}"
    filename=$(mpvc_get "playlist/$lid/filename")
    result=$filename
    if [ "$fullPath" != "fullpath" ]; then result=$(mpvc_curl_cache_title_clean "$filename"); fi
    result="${result:-${filename%%*/}}"
    echo "$result"
}

# print filenames in the current playlist, mode=numbered disables filenames/URLs to title expansion
mpvc_get_playlist() {
    mode="${1:-}"
    lcount=$(mpvc_get playlist-count)
    lpos=$(mpvc_get playlist-pos)

    if [ -z "$lcount" ]; then return; fi
    firstlast=$(mpvc_get_terminal_height "$lpos" "$lcount")
    if [ "$mode" = "numbered" ]; then
        mpvc_get_playlist_once "$mode"; return
    fi

    #mpvc_isinteractive=""; if [ -t 1 ]; then mpvc_isinteractive=1; fi
    mpvc_get_playlist_once |
        awk -v mpvc="$0" -v lpos="$lpos" -v cols="$(mpvc_tty_cols)" -v firstlast="$firstlast" \
        '
        BEGIN {
            # truncate lines x cols when interactive (configurable) TBD
            isinteractive=1
            split(firstlast, flarray, " ")
            first=flarray[1]; last=flarray[2]
        }

        function basename(url, fields, n)
        {
            n=split(url, fields, "/")
            return fields[n]
        }
        function truncate(str)
        {
            trunclen=cols - (length("123 ")+length(" ...\n"))
            if (isinteractive && length(str) > trunclen)
                return sprintf("%.*s ...", trunclen, str)
            return str
        }

        function mpvc_ytquery(url,  ytcmd, ytitle)
        {
            gsub("^ *", "", url)
            ytitle=url
            if (url ~ "^https?:")
            {
                ytcmd=sprintf("%s ytquery \"%s\"", mpvc, url)
                ytcmd | getline ytitle # TBD
                #if (!ytitle) mpvc " ytquery " url | getline ytitle

                gsub("\\\\u00", "\\x", ytitle)
                gsub("\\\\x22", "\x22", ytitle)
                gsub("\\\\x23", "\x23", ytitle)
                gsub("\\\\x25", "\x25", ytitle)
                gsub("\\\\x26", "\x26", ytitle)
                gsub("\\\\x27", "\x27", ytitle)
                gsub("\\\\xa0", "\xa0", ytitle)
                gsub("\\\\u[0-9a-f]{4}", "", ytitle)
            } else {
                ytitle=basename(url)
            }

            return ytitle
        }

        {
            lid = NR -1
            if (!(first <= lid && lid <= last))
            {
                next
            }

            if (lpos == lid)
            {
                if (ENVIRON["NO_COLOR"])
                {
                    title=mpvc_ytquery($0)
                    printf("%2d  %s\n", lid, title)
                }
                else
                {
                    mpvc " cmd expand-text \\${percent-pos}" | getline pct
                    count=int((cols) * (pct/100))
                    title=mpvc_ytquery($0)
                    line=sprintf("%2d  %s", lid, truncate(title))
                    fmtstr="\033[7m%-"count"s\033[0m\n"
                    printf(fmtstr, line)
                }
            }
            else
            {
                title=mpvc_ytquery($0)
                printf("%2d  %s\n", lid, truncate(title))
            }
        }
    '
    QUIETFLAG="true"
}

# saves playlist to file but with no path checking. we live dangerously
mpvc_save_playlist() {
    output="${1:-}"
    if [ -z "$output" ]; then
        output="/dev/stdout"
    else
        if [ -e "$output" ]; then
            echo "Playlist $output exists! Overwrite? [Y/n] "; read -r key
            if [ "$key" != "Y" ]; then return; fi
        fi
        echo "Adding files to $output ..."
    fi
    mpvc_get_playlist_once > "$output"
    QUIETFLAG="true"
}

mpvc_lsplaylists() { ls -1d "$@" "$MPVC_PLAYLIST"/*; }
mpvc_autosave_playlist() { mpvc_save_playlist "$MPVC_PLAYLIST/${1:-$(date -Imin)}"; }
mpvc_autoload_playlist() { mpvc_load_playlist < "$MPVC_PLAYLIST/${1:-$(date -Imin)}"; }

# $buffer stdin: to save the whole stdin in one piece at once
mpvc_buffer_stdin()
{
    buffer=""
    while read -r line; do buffer="${buffer}\n${line}"; done
    printf "$buffer\n"
}

# loads a playlist from stdin.
mpvc_load_playlist() {
    QUIETFLAG="true"
    buffer=$(mpvc_buffer_stdin)

    if [ -z "$buffer" ]; then return; fi
    if [ "${1:-}" = "clear" ]; then mpvc_clear_playlist; fi
    printf "$buffer\n" | while read -r line; do mpvc_appendtracks "$line"; done
}

# mpvc stash [list|show|push|drop|apply]
mpvc_stash() {
    cmd="$1"; shift
    QUIETFLAG="true"
    case "$cmd" in
        show|list|ls)
            if [ -z "${1:-}" ]; then
                ls -ltr "$MPVC_STASH_DIR" ;
            else
                cat "$MPVC_STASH_DIR/$1";
            fi
            ;;
        edit|ed) ${EDITOR:-vi} "$MPVC_STASH_DIR/$1" ;;
        drop|rm) rm -i "$MPVC_STASH_DIR/$1" ;;
        push|cp)
            stashid="${1:-}"
            if [ -z "$stashid" ]; then
                stashid="${1:-stash-$(date -Imin)}"
                warn "$PROGNAME: $PROGNAME stash apply $stashid # new stash created"
            fi
            if [ -e "$MPVC_STASH_DIR/$stashid" ]; then
                warn "$PROGNAME: Warn Existing $stashid stash found, drop it first. Quitting"
                return
            fi
            mpvc_stash current "$stashid" > "$MPVC_STASH_DIR/$stashid"
            ;;
        apply|do) # if no stash given, default to stdin
            stashid="${1:-}"
            if [ -z "$stashid" ]; then
                mpvc_stash apply_current
            else
                mpvc_stash apply_current "$stashid" < "$MPVC_STASH_DIR/$stashid"
            fi
            ;;
        apply_current)
            while read -r line
            do
                case "$line" in
                    "# $PROGNAME "*) echo "$line";;
                    "mpvc --mpv")  mpvc_mpv;;
                    "mpvc --wait") mpvc_wait;;
                    "mpvc mpv")    mpvc_mpv;;
                    "mpvc wait")   mpvc_wait;;
                    "mpvc cmd "*)  mpvc_cmd ${line##mpvc cmd };;
                    "mpvc set "*)  mpvc_set ${line##mpvc set } || true;;
                    "mpvc add "*)  mpvc_appendtrack "${line##mpvc add }";;
                esac
            done
            ;;
        current|curr)
            echo "# $PROGNAME stash $MPVC_STASH_DIR/$1 # $PROGURL @version $PROGVERSION"
            echo "mpvc mpv"
            echo "mpvc wait"
            echo "mpvc set pause yes"
            echo "mpvc cmd playlist-clear"
            echo "mpvc cmd playlist-remove 0"
            mpvc_get_playlist_once | awk '{ gsub("^[ 	]*|[ 	]*$", ""); print "mpvc add "$0 }'
            echo "mpvc set playlist-pos $(mpvc_get playlist-pos)"
            echo "mpvc set loop-file $(mpvc_get loop-file)"
            echo "mpvc set loop-playlist $(mpvc_get loop-playlist)"
            echo "mpvc set ab-loop-a $(mpvc_get ab-loop-a)"
            echo "mpvc set ab-loop-b $(mpvc_get ab-loop-b)"
            echo "mpvc set idle $(mpvc_get idle)"
            echo "mpvc set mute $(mpvc_get mute)"
            echo "mpvc set fullscreen $(mpvc_get fullscreen)"
            echo "mpvc set aspect $(mpvc_get aspect)"
            echo "mpvc set cache $(mpvc_get cache)"
            echo "mpvc set speed $(mpvc_get speed)"
            echo "mpvc set volume $(mpvc_get volume)"
            echo "mpvc set volume-max $(mpvc_get volume-max)"
            echo "mpvc set video-zoom $(mpvc_get video-zoom)"
            echo "mpvc set video $(mpvc_get video)"
            echo "mpvc set screen $(mpvc_get screen)"
            echo "mpvc wait"
            echo "mpvc set playback-time $(mpvc_get playback-time)"
            echo "mpvc set pause $(mpvc_get pause)"
            #echo "mpvc set msg-level $(mpvc_get msg-level)"
            #echo "mpvc set af $(mpvc_get af)"
            #echo "mpvc set working-directory $(mpvc_get working-directory)"
            ;;

        replay)
            buffer=$(mpvc_stash current "replay" | mpvc_buffer_stdin)
            printf "$buffer\n" | mpvc_stash apply
            ;;
        help)
            echo "usage: $PROGNAME stash [list|current|edit|show|push|drop|apply|replay]"
            ;;
        *)
            warn "$PROGNAME stash: error: unknown subcommand $cmd (see $PROGNAME stash help)."
            ;;
    esac
}

mpvc_dbinit() {
    locate -b '*.mp3' '*.mp4' '*.ogg' '*.opus' |
        sed 's|^\(/.*/\).*|\1|' | sort | uniq | tee "$MPVC_DATABASE"
}

mpvc_dblist() {
    cat "$MPVC_DATABASE"
    for playlist in $(printf "%s\n" "$MPVC_PLAYLIST"/*); do echo "$playlist"; done
}

## Control Functions ##########################################################

mpvc_appendtrack() {
    filename="$*"
    # require absolute paths
    case "$filename" in
        /*) if [ ! -e "$filename" ]; then warn "Warning: ${filename##*/} not found."; fi ;;
        *)  if [ -e "$filename" ]; then filename="$(pwd)/$filename"; fi ;;
    esac
    # skip over various other filetypes and images unless wanted
    case "$filename" in
        *.txt|*.log|*.cue) return ;;
        *.png|*.jpg|*.jpeg|*.gif|*.psd|*.pdf) if [ "$IMAGEFLAG" != "true" ]; then return; fi ;;
    esac
    if [ -n "$filename" ]; then
        # cache media here if media is found in local storage
        if [ "$MPVC_LOCAL_CACHE" = "true" ]; then filename=$(echo "$filename" | $PROGDIR/mpvc-fzf -C); fi
        mpvc_ecmdr "loadfile" "$filename" "append-play" || return 1
        echo "Adding: $(mpvc_curl_cache_title_clean "$filename")"
    fi
}

mpvc_appendtracks() {
    QUIETFLAG="true"
    mpvc_mpv
    for arg in "$@"; do
        mpvc_appendtrack "$arg"
        shift
    done
}

mpvc_get_random() { od -vAn -N2 -tu2 < /dev/urandom; }
mpvc_play_random() { mpvc_set_track "$(mpvc_get_random)" "absolute"; }

mpvc_play_now() {
    mpvc_play_next "$@"
    mpvc_set_track 1 relative
}

mpvc_play_next() {
    QUIETFLAG="true"
    # add track to the playlist & move to next position
    mpvc_appendtracks "$@"
    lid_last="$(( $(mpvc_get playlist-count) - 1 ))"
    lid_next="$(( $(mpvc_get playlist-pos) + 1 ))"
    for f in "$@"; do
        mpvc_move_track "$lid_last" "$lid_next"
    done
}

mpvc_set_time() {
    mode=$1; shift
    if [ "$mode" = "absolute" ]; then
        timeSec=$(mpvc_parse_time "$1") || return $?
        mpvc_set "playback-time" "$timeSec"
        return
    fi
    # relative
    case "$1" in
        *%*) mpvc_set "percent-pos" "${1%%%}"; return ;;
        -*)  mpvc_add "playback-time" "-$(mpvc_parse_time "${1##-}")" ;;
        +*)  mpvc_add "playback-time" "+$(mpvc_parse_time "${1##+}")" ;;
        *)   mpvc_add "playback-time" "$(mpvc_parse_time "${1}")" ;;
    esac
}

mpvc_set_track() {
    isInt "$1" || return 1
    lpos=$(mpvc_get playlist-pos)
    lcount=$(mpvc_get playlist-count)
    if [ "$lcount" = "0" ]; then return; fi
    if [ "$lpos" = "null" ]; then lpos=0; fi
    case "$2" in
        absolute) newpos=$(( $1 % $lcount )) ;;
        relative) newpos=$(( ($lpos + $1) % $lcount )) ;;
    esac
    mpvc_set "playlist-pos" "$newpos"
}

mpvc_move_track() {
    QUIETFLAG="true"
    lpos=$(mpvc_get playlist-pos)
    lcount=$(mpvc_get playlist-count)
    if [ -z "${2:-}" ]; then srcpos=$lpos; dstpos=$1; else srcpos=$1; dstpos=$2; fi
    if [ "$dstpos" = "$" ]; then dstpos="$lcount"; fi
    #isInt "$srcpos" && isInt "$dstpos" || return 1

    mpvc_ecmdr "playlist-move" "$srcpos" "$dstpos" || return 1
    #quietcheck mpvc_get_playlist
}

mpvc_remove_track() {
    lid=$1
    if [ "$lid" = "current" ]; then lid=$(mpvc_get playlist-pos); fi
    if [ "$lid" = "$" ]; then lid=$(( $(mpvc_get playlist-count) - 1 )); fi
    filename="$(mpvc_get_playlist_filename "$lid")"
    mpvc_ecmdr "playlist-remove" "$lid" || return 1
    if [ -n "$filename" ]; then
        quietcheck warn "$filename removed from playlist."
    fi
}

mpvc_always_play() {
    if [ "$(mpvc_get playlist-pos)" = "null" ]; then
        mpvc_set_track 0 absolute; return
    fi
    mpvc_set "pause" "no"
}

mpvc_toggle_loop() {
    property=${1:-}
    value=${2:-}
    case "$value" in
        '')      mpvc_ecmdr "cycle-values" "$property" "yes" "no" ;;
        on|yes)  mpvc_set "$property" yes ;;
        off|no)  mpvc_set "$property" no  ;;
        *)       mpvc_set "$property" "$value";;
    esac
}

mpvc_set_volume() {
    volumemax=$(mpvc_get volume-max)
    if [ -z "$volumemax" ]; then return; fi
    if [ -n "$1" ] && [ "${1%.*}" -ge "${volumemax%.*}" ]; then
        QUIETFLAG="true"
        warn "$PROGNAME: Error: volume $1 above volume-max"
        return
    fi
    case "${1:-}" in
        '') die 1 "$PROGNAME: Error: Missing volume." ;;
        +*) mpvc_add "volume" "$1" ;;
        -*) mpvc_add "volume" "$1" ;;
        *%) mpvc_set "volume" "${1%%%}";;
        *)  mpvc_set "volume" "$1" ;;
    esac
}

mpvc_nocolor()
{
    NO_COLOR_BAK=${NO_COLOR}
    export NO_COLOR=true
    "$@"
    NO_COLOR=${NO_COLOR_BAK}
}

mpvc_search() {
    if [ $# -lt 2 ]; then return; fi
    mode=$1; shift;
    mpvc_nocolor mpvc_get_playlist "$mode" | awk '/'"$*"'/ { print $0 }'
}

mpvc_search_play() {
    if [ $# -lt 2 ]; then return; fi
    mode=$1; shift
    lid=$(mpvc_search "$mode" "$1" | awk '{print $1; exit}')
    if [ -z "$lid" ]; then warn "$PROGNAME: Searching for $*, nothing found."; fi
    mpvc_set_track "$lid" absolute
}

mpvc_search_remove() {
    if [ $# -lt 2 ]; then return; fi
    mode=$1; shift
    list=$(mpvc_search "$mode" "$1" | awk '{print $1}' | mpvc_tac )
    if [ -z "$list" ]; then warn "$PROGNAME: Searching for $*, nothing found."; fi
    for i in $list; do mpvc_remove_track "$i"; done
    QUIETFLAG="true"
}

mpvc_search_move() {
    if [ $# -lt 2 ]; then return; fi
    mode=$1; shift
    list=$(mpvc_search "$mode" "$1" | awk '{print $1}' | mpvc_tac )
    if [ -z "$list" ]; then warn "$PROGNAME: Searching for $*, nothing found."; fi
    for i in $list; do mpvc_move_track "$i" "$2"; done
    QUIETFLAG="true"
}

mpvc_shuffle_playlist() {
    QUIETFLAG=true
    case "$1" in
        shuffle|unshuffle) mpvc_ecmdr "playlist-$1" || return 1;;
        *) return;;
    esac
    echo "Playlist $1."
    if [ "$(mpvc_get loop-playlist)" = "no" ]; then mpvc_toggle_loop "loop-playlist" yes; fi
}

mpvc_crop_playlist() {
    mpvc_ecmdr "playlist-clear" || return 1
    quietcheck mpvc_get_playlist
}

mpvc_clear_playlist() {
    # kill any running process of mpvc add
    #if quiet pgrep -f "mpvc add"; then pkill -f "mpvc add"; fi
    mpvc_crop_playlist
    mpvc_remove_track 0
    echo "Playlist cleared."
}

## Chapter functions ##########################################################

mpvc_chapter_list_json()
{
     mpvc_getr chapter-list |
         grep -o '"data":\[.*\]' |
         sed -e 's/^"data"://;' \
             -e 's|{"title"|\n    {"title"|g;' \
             -e '/^\[\]$/ !s/]$/\n]/;'
         #    -e 's/","/", "/g; s/":/": /g'
}

mpvc_chapter_list()
{
    mode="${1:-}"
    chapter_pos=$(mpvc_get "chapter")
    chapter_count=$(mpvc_get "chapter-list/count")

    firstlast=$(mpvc_get_terminal_height "$chapter_pos" "$chapter_count")
    mpvc_chapter_list_json |
        grep -o '"title":".*' | sed 's/"title":"//; s/","time":.*$//' |
        awk -v mode="$mode" -v chapter_pos="$chapter_pos" -v firstlast="$firstlast" \
        '
        BEGIN {
            split(firstlast, flarray, " ")
            first=flarray[1]; last=flarray[2]
        }

        {
            chapternr = NR-1
            if (!(first <= chapternr && chapternr <= last) && (mode == "short"))
            {
                next
            }

            if (chapter_pos == chapternr)
            {
                if (ENVIRON["NO_COLOR"])
                {
                    if (mode == "numbered") printf("%2d  %s\n", chapternr, $0);
                    else printf("%s\n", $0);
                }
                else
                {
                    if (mode == "numbered") printf("%2d  \033[7m%s\033[0m\n", chapternr, $0);
                    else printf("\033[7m%s\033[0m\n", $0);
                }
            }
            else
            {
                if (mode == "numbered") printf("%2d  %s\n", chapternr, $0);
                else printf("%s\n", $0);
            }
        }'
        QUIETFLAG=true
}

# use mpv ab-loop to loop a chapter
mpvc_chapter_cloop()
{
    chapter=""
    abloopa="no"
    abloopb="no"
    cpos=$(mpvc_get chapter)
    if [ "$cpos" = "null" ]; then return; fi
    if [ "$(mpvc_get ab-loop-a)" = "no" -a "$cpos" -ge 0 ]; then
        chapterlist="$(mpvc getr chapter-list)"
        chapter="$(echo "$chapterlist" | jq ".data | .[$cpos + 0] | .title")"
        abloopa="$(echo "$chapterlist" | jq ".data | .[$cpos + 0] | .time")"
        abloopb="$(echo "$chapterlist" | jq ".data | .[$cpos + 1] | .time")"
        if [ "$abloopb" = "null" ]; then abloopb="$(mpvc_get duration)"; fi
    fi
    mpvc_set ab-loop-a "$abloopa"
    mpvc_set ab-loop-b "$abloopb"
}

mpvc_chapter_replay() { mpvc_chapter_set "$(mpvc_get chapter)"; }
mpvc_chapter_next()   { mpvc_chapter_set $(( ( $(mpvc_get chapter) + 1 ) % $(mpvc_get chapter-list/count) )); }
mpvc_chapter_prev()   { mpvc_chapter_set $(( ( $(mpvc_get chapter) - 1 ) % $(mpvc_get chapter-list/count) )); }
mpvc_chapter_set()    { if [ "$(mpvc_get "chapter-list/count")" -gt 0 ]; then mpvc_set "chapter" "$1"; fi; }

mpvc_chapter_play_random() { mpvc_chapter_set "$(( $(mpvc_get_random) % $(mpvc_get "chapters") ))" ; }
mpvc_chapter_search() { mpvc_nocolor mpvc_chapter_list "full" | awk "/$*/ {print NR-1; exit};"; }
mpvc_chapter_search_play()
{
    chapter=$(mpvc_chapter_search "$@")
    if [ -z "$chapter" ]; then return; fi
    mpvc_chapter_set "$chapter"
}

## Formatting and Printing Functions ##########################################

# formats and prints according to $FORMATSTRING
mpvc_print_status() {
    # not that nice, in fact way more ugly, but also way faster
    F=$(echo "$FORMATSTRING" |
        awk -v status=$(mpvc_get_pause_status) '
        {
            split("year genre album comment volume path height width playback-time ab-loop-[ab] speed force-window video screen aspect idle fullscreen chapter chapters =chapter", RE)
            for (i in RE) { re=RE[i]; gsub("%"re"%", "${"re":NA}"); }

            gsub("%title%", "${media-title}")
            gsub("%artist%", "${?metadata/by-key/artist:${metadata/by-key/artist}}${!metadata/by-key/artist:NA}")
            gsub("%albumartist%", "${?metadata/by-key/album:${metadata/by-key/album}}${!metadata/by-key/album:NA}")
            gsub("%muted%", "${mute}")
            gsub("%percentage%", "${percent-pos}")
            gsub("%name%", "${filename}")
            gsub("%repeat%", "${loop-playlist}")
            gsub("%single%", "${loop-file}")
            gsub("%frame%", "${estimated-frame-number}")
            gsub("%dir%", "${working-directory}")
            gsub("%remaining%", "${playtime-remaining}")
            gsub("%length%", "${duration}")
            gsub("%time%", "${playback-time}")
            gsub("%precisetime%", "${playback-time}")
            gsub("%playlistlength%", "${playlist-count}")
            gsub("%position%", "${playlist-pos}")

            gsub("%status%", status)

            print
        }
        '
    )
    mpvc_cmd "expand-text" "${F}" | sed 's/ \\r/\n/g'
}

mpvc_print_status_final() {
    if [ "$QUIETFLAG" = "true" ]; then return; fi
    # catches if mpv is idle or not
    if [ "$(mpvc_get idle-active)" = "true" ]; then
        warn "MPV on ${MPVC_SOCKET##$HOME/} is currently idle."; return
    fi
    mpvc_print_status
}

## Misc Functions #############################################################

isInt() { printf '%d' "$1" >/dev/null 2>&1 && [ -n "$1" ]; }

mpvc_tty_size() {
    # this is convoluted as mpvc is run as cgi by mpvc-web without an actual tty
    ttydev="${ttydev:-$(if tty -s; then tty; else ps -hp $$ -o tty | sed 's|^|/dev/|'; fi)}"
    ttysize=${ttysize:-$(equiet stty -F "$ttydev" size || equiet stty -f "$ttydev" size || stty)}
    echo "$ttysize"

}
mpvc_tty_lines() { ttysize=$(mpvc_tty_size); echo "${ttysize%% *}"; }
mpvc_tty_cols() { ttysize=$(mpvc_tty_size); echo "${ttysize##* }"; }

mpvc_get_terminal_height() {
    plpos="$1"
    lcount="$2"
    if [ "$plpos" = "null" ]; then plpos=0; fi
    lines=$(mpvc_tty_lines)
    rows=$((lines - ${MPVC_CLINE:-3}))
    half=$((rows / 2))
    plhalf=$((plpos + half))

    firstlast="0 $lcount"
    if [ "$mode" != "full" ]; then
        if   [ "$lcount" -le $rows ]; then     firstlast="0 $lcount"
        elif [ "$plpos"  -le $half ]; then     firstlast="0 $rows"
        elif [  $plhalf  -ge "$lcount" ]; then firstlast="$((lcount - rows)) $lcount"
        elif [  $plhalf  -lt "$lcount" ]; then firstlast="$((plpos - half)) $plhalf"
        fi
    fi
    echo "$firstlast"
}

mpvc_parse_time() {
    if ! echo "$1" | grep -q -e "^\([0-9.]*:\)\{0,2\}[0-9.]*$" -e "^[0-9]*[sSmMhH]$"; then
        warn "Timestamp formats must match either H:M:S with hour and minute fields optional,"
        warn "or a single integer number with a unit of time appended: h, m, s."
        exit 1
    fi
    case "$1" in
        *s|*S|*m|*M|*h|*H)
            timeInt=${1%%?}
            isInt "$timeInt" || exit 1
            case "$1" in
                *h|*H) timeInt=$((timeInt * 60 * 60)) ;;
                *m|*M) timeInt=$((timeInt * 60))      ;;
            esac
            ;;
        *)
            timeInt=$(printf '%s' "$1" |
                awk -F ':' '{ for (x=1; x<=NF; x++) t=t*60+$x; print t }')
            ;;
    esac
    printf "%d" "$timeInt"
}

mpvc_handle_socket() {
    if [ $# -eq 0 ];
    then
        echo "$MPVC_SOCKET"
    else
        MPVC_SOCKET="${1:-}"
        mpvc_config
        #mpvc_validate_socket
    fi
}

mpvc_validate_socket() {
    # validate deps
    if ! test -x "$MPVC_MPV" && ! quiet command -v "$MPVC_MPV"; then
        die 4 "$PROGNAME: Error: No mpv found. Install to continue."
    fi
    if ! test -x "$MPVC_SOCAT" && ! quiet command -v "$MPVC_SOCAT" && ! quiet command -v nc; then
        die 4 "$PROGNAME: Error: No socat found. Install to continue."
    fi

    # test if socket exists
    if [ ! -S "$MPVC_SOCKET" ]; then
        die 2 "$PROGNAME: Error: Socket ${MPVC_SOCKET##$HOME/} does not exist. Use mpvc --mpv to start one."
    fi
    # test if socket is open
    if [ "$(mpvc_get pause)" = "" ]; then
        die 3 "$PROGNAME: Error: No files added to ${MPVC_SOCKET##$HOME/}."
    fi
    # test if socat works on socket
    if ! mpvc_sockcmd '{ "command": [ "get_property_string", "idle-active" ] }'; then
        die 4 "$PROGNAME: Error: $MPVC_SOCAT failed. Install socat to continue."
    fi
}

mpvc_get_version() {
    echo "version: $PROGNAME # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL (forks lwillets/mpvc)"
    echo
    "$MPVC_MPV" --version
}

mpvc_idleloop() { $MPVC_SOCAT -t0 -,ignoreeof "$MPVC_SOCKET"; }
mpvc_idle() { mpvc_observe_property "$1" | awk "/$1/ { print; exit }"; }
mpvc_observe_property() { q='' mpvc_cmdr_ '"observe_property_string"' 1 "\"$1\"" | mpvc_idleloop; }

mpvc_delay() { sleep "${1:-0.1}"; }
mpvc_wait()  { for i in $(seq 0 100); do mpvc_delay "${1:-}"; [ -n "$(mpvc_get idle-active)" ] && break; done; }
mpvc_mpv() { mpvc_startmpv --really-quiet --idle=once; }
# mpvc_mpv: exec & wait until mpv starts up
mpvc_startmpv() {
    if [ -z "$(mpvc_get idle-active)" ]; then
        mpvc_delay 0.1
        if [ -n "$(mpvc_get idle-active)" ]; then return; fi
        echo "$PROGNAME: No running mpv found, starting mpv now"
        exec "$MPVC_MPV" --input-ipc-server="$MPVC_SOCKET" $MPVOPTIONS "$@" &
        mpvc_wait 0.5
    fi
}


main() {
    mpvc_config
    arg1=${1:-}
    case "$arg1" in
    ytquery|ytqueryjson) ;;
    -k|--kill|kill|-K|--killall|killall) ;;
    -c|--crop|crop|-C|--clear|clear|cmd|sockcmd|socklist|--socklist) ;;
    -a|add|append|-A|playnext|--playnext|-n|playnow|--playnow|mpv|--mpv|stash|--stash|--toggle|toggle|-q|--quiet) ;;
    load|--load|autoload|--autoload|lsplaylists|--lsplaylists|dbinit|--dbinit|dblist|--dblist) ;;
    version|--version|-Q|--vid=no|-S|--socket) ;;
    help|--help|-h|long-help|--long-help|-H|--list-options) ;;
    *) mpvc_validate_socket;; # otherwise, validate socket
    esac
    for arg in "$@"; do
        # grab mpv options first if any
        if [ "$arg" = "--" ]; then MPVFLAG=true; shift; continue; fi
        if [ "${MPVFLAG:-}" = "true" ]; then MPVOPTIONS="$MPVOPTIONS $arg"; shift; continue; fi
        if [ $# -eq 0 ]; then break; fi
        case "${1:-}" in
            # mpc compatibility layer
            play|start|resume)
                shift
                case "${1:-}" in
                    '') ;;
                    $) mpvc_set_track "$(( $(mpvc_get playlist-count) - 1 ))" absolute;;
                    *) mpvc_set_track "${1:-}" absolute;;
                esac
                mpvc_always_play
            ;;
            vol|volume)     shift; mpvc_set_volume "${1:-}" ;;
            repeat)         shift; mpvc_toggle_loop "loop-playlist" "${1:-}" ;;
            single)         shift; mpvc_toggle_loop "loop-file" "${1:-}" ;;
            pause)          mpvc_set "pause" "yes" ;;
            next|--next)    mpvc_set_track 1 relative ;;
            prev|--prev)    mpvc_set_track -1 relative;;
            move|mv)        shift; mpvc_move_track "${1:-}" "${2:-}" ;;
            mute)           mpvc_set "mute" "yes" ;;
            unmute)         mpvc_set "mute" "no" ;;
            pretty)         die 1 "$PROGNAME: Error $* not implemented" ;;
            find)           die 1 "$PROGNAME: Error $* not implemented" ;;

            -a|add|--append)         shift; mpvc_appendtracks "$@"; ;;
            -A|--playnext|playnext)  shift; mpvc_play_next "$@" ;;
            -n|--playnow|playnow)    shift; mpvc_play_now "$@" ;;
               --playrand|playrand)  shift; mpvc_play_random "$@" ;;
            #replace|--replace) shift; mpvc_replacetracks "$@" ;;

            # consume) to implement # add on|off toggle
            # random) MPV doesn't have this control option!

            # GNU-style options
            -t|--seek|seek)                  shift; mpvc_set_time "relative" "${1:-}" ;;
            -T|--time|time)                  shift; mpvc_set_time "absolute" "${1:-}" ;;
            -v|--vol)                        shift; mpvc_add "volume" "${1:-}"  ;;
            -V|--volume)                     shift; mpvc_set "volume" "${1:-}"  ;;
            -x|--speed|speed)                shift; mpvc_add "speed" "${1:-}"  ;;
            -X|--speedval)                   shift; mpvc_set "speed" "${1:-}"  ;;
            -j|--track|track)                shift; mpvc_set_track "${1:-}" relative  ;;
            -J|--tracknum|tracknum)          shift; mpvc_set_track "${1:-}" absolute  ;;
            -r|--remove|rm|remove|del)       shift; mpvc_remove_track "${1:-}"; QUIETFLAG=true;;
            -o|--save|save)                  shift; mpvc_save_playlist "${1:-}" ;;
            --load|load)                     shift; mpvc_load_playlist      ;;

            mpv|--mpv)                       mpvc_mpv ;;
            --current|current)               ;;
            --loadc|loadc)                   shift; mpvc_load_playlist "clear"    ;;
            --saven|saven)                   shift; mpvc_get_playlist_once "numbered"; QUIETFLAG=true;;
            --autosave|autosave)             shift; mpvc_autosave_playlist "${1:-}"; ;;
            --autoload|autoload)             shift; mpvc_autoload_playlist "${1:-}"; ;;
            --lsplaylists|lsplaylists)       shift; mpvc_lsplaylists "${1:-}"; QUIETFLAG=true;;
            --dblist|dblist)                 shift; mpvc_dblist; return ;;
            --dbinit|dbinit)                 shift; mpvc_dbinit; return ;;
            --cycle|cycle)                   shift; mpvc_cycle "$@"; QUIETFLAG=true;;
            --set|set|s)                     shift; mpvc_set "$@"; return;;
            --get|get|g)                     shift; mpvc_get "${1:-}"; QUIETFLAG=true;;
            --sets|sets|ss)                  shift; mpvc_set "$@"; return;;
            --gets|gets|gs)                  shift; mpvc_get "${1:-}"; QUIETFLAG=true;;
            --setr|setr|sr)                  shift; mpvc_setr "$@"; return;;
            --getr|getr|gr)                  shift; mpvc_getr "${1:-}"; QUIETFLAG=true;;
            --togglec|togglec)               shift; mpvc_cycle "cache" ;;
            --togglev|togglev)               shift; mpvc_cycle "video" ;;
            --togglew|togglew)               shift; mpvc_cycle "force-window" ;;
            --togglei|togglei)               shift; mpvc_cycle "idle" ;;
            --togglef|togglef)               shift; mpvc_cycle "fullscreen" ;;
            --idle|idle)                     shift; mpvc_idle "${1:-}"; QUIETFLAG=true ;;
            --idleloop|idleloop)             shift; mpvc_idleloop "${1:-}"; QUIETFLAG=true ;;
            --observe|observe)               shift; mpvc_observe_property "${1:-}"; QUIETFLAG=true ;;
            --cmd|cmd)                       shift; mpvc_cmd "$@"; return ;;
            --cmdr|cmdr)                     shift; mpvc_cmdr "$@"; return ;;
            --sockcmd|sockcmd)               shift; mpvc_sockcmd_ "${1:-}"; QUIETFLAG=true ;;
            --sockrepl|sockrepl)             shift; mpvc_sockrepl; QUIETFLAG=true ;;
            --socklist|socklist)             shift; mpvc_socklist "${1:-}"; QUIETFLAG=true ;;

            --search|search)                 shift; mpvc_search "full" "$@"; QUIETFLAG=true ;;
            --Search|Search)                 shift; mpvc_search "numbered" "$@"; QUIETFLAG=true ;;
            -R|--searchrm|searchrm|srm)      shift; mpvc_search_remove "full" "${1:-}";;
               --searchRm|searchRm|sRm)      shift; mpvc_search_remove "numbered" "${1:-}";;
            -M|--searchmv|searchmv|smv)      shift; mpvc_search_move "full" "${1:-}" "${2:-}";;
               --searchMv|searchMv|sMv)      shift; mpvc_search_move "numbered" "${1:-}" "${2:-}";;
               --searchplay|searchplay|splay)shift; mpvc_search_play "full" "${1:-}" ;;
               --searchPlay|searchPlay|sPlay)shift; mpvc_search_play "numbered" "${1:-}" ;;
            --stash|stash)                   shift; mpvc_stash "${1:-}" "${2:-}";;
            --expand-text|expand-text)       shift; mpvc_cmd expand-text "$@"; return;;
            --metadata|metadata)             shift; mpvc_cmdr get_property metadata "$@"; return;;
            --filename|filename)             shift; mpvc_get_playlist_filename "$@"; return;;
            --replay|replay)                 mpvc_set_time "absolute" 0 ;;

            ytquery)                         shift; mpvc_curl_cache_title_clean "$@"; return;;
            ytqueryjson)                     shift; mpvc_curl_cache_metadata_json "$@"; return;;

            cprev|--chapter-prev|chapter-prev)            mpvc_chapter_prev ;;
            cnext|--chapter-next|chapter-next)            mpvc_chapter_next ;;
            cplay|--chapter-play|chapter-play)            shift; mpvc_chapter_set "${1:-}" ;;
            cplayrand|--cplayrand)                        shift; mpvc_chapter_play_random "$@" ;;
            creplay|--chapter-replay|chapter-replay)      mpvc_chapter_replay ;;
            cloop|--chapter-loop|chapter-loop)            mpvc_chapter_cloop ;;

            clist|--chapter-list|chapter-list)            mpvc_chapter_list "short";;
            clistf|--chapter-list-full|chapter-list-full) mpvc_chapter_list "full";;
            clistn|--chapter-list-nr|chapter-list-nr)     mpvc_chapter_list "numbered";;
            clistj|--chapter-list-json|chapter-list-json) mpvc_chapter_list_json; QUIETFLAG=true;;
            csearch|--chapter-search|chapter-search)      shift; mpvc_chapter_search "${1:-}"; QUIETFLAG=true;;
            csplay|csearchplay|--chapter-searchplay|chapter-searchplay)      shift; mpvc_chapter_search_play "${1:-}"; QUIETFLAG=true;;

            -k|--kill|kill)                  mpvc_ecmdr "quit"; QUIETFLAG=true ;;
            -K|--killall|killall)            quiet pkill -9 -f "$MPVC_MPV "; QUIETFLAG=true ;;
            -s|--stop|stop)                  mpvc_set "pause" "yes"; mpvc_set_time "absolute" 0 ;;
            -P|--play)                       mpvc_always_play ;;
            -p|--toggle|toggle)              mpvc_cycle "pause" ;;
            -m|--mute)                       mpvc_cycle "mute"                ;;
            -i|--playlist|playlist)          mpvc_get_playlist "";            ;;
            -I|--fullplaylist|fullplaylist)  mpvc_get_playlist "full";        ;;
               --playlistjson|playlistjson)  mpvc_get_playlist_json ""        ;;
            -L|--loop|loop)                  mpvc_toggle_loop "loop-playlist" ;;
            -l|--loopfile|loopfile)          mpvc_toggle_loop "loop-file"     ;;
            -z|--shuffle|shuffle)            mpvc_shuffle_playlist shuffle;;
            -Z|--unshuffle|unshuffle)        mpvc_shuffle_playlist unshuffle;;
            -c|--crop|crop)                  mpvc_crop_playlist; QUIETFLAG=true;;
            -C|--clear|clear)                mpvc_clear_playlist; QUIETFLAG=true;;
            --delay|delay)                   mpvc_delay;;
            --wait|wait)                     mpvc_wait;;

            --ttysize|ttysize)               mpvc_tty_size; QUIETFLAG=true;;
            --ttycols|ttycols)               mpvc_tty_cols; QUIETFLAG=true;;
            --ttylines|ttylines)             mpvc_tty_lines; QUIETFLAG=true;;

            # global argument parsing
            -f|--format)                     shift; FORMATSTRING="${1:-}"       ;;
            -S|--socket)                     shift; mpvc_handle_socket "${1:-}";;
            -Q|--vid=no)                     MPVOPTIONS="$MPVOPTIONS --vid=no"; ;;
            --image)                         IMAGEFLAG=true;                ;;
            -q|--quiet)                      QUIETFLAG=true;                ;;
            --color|color)                   unset NO_COLOR                 ;;
            --nocolor|nocolor)               export NO_COLOR=true           ;;
            --version|version)               mpvc_get_version; exit 0;      ;;
            --list-options)                  usage; exit 0;                 ;;
            -h|--help|h|help)                usage; exit 0;                 ;;
            -H|--long-help|long-help)        usage "$@"; exit 0;            ;;
            -?)                              usage; exit 1;                 ;;
        esac
        if [ $# -ge 1 ]; then shift; fi
    done
    # produce format strings last
    quietcheck mpvc_print_status_final
}

quietcheck main "$@"
